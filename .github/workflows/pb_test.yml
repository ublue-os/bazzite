name: Build img
on:
  workflow_dispatch:

env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_NAME: bazzite-deck

  base_image_flavor: main
  base_name: bazzite-deck
  base_image_name: kinoite
  target_image_flavor: main
  target_nvidia_flavor: nvidia
  fedora_version: 42
  kernel_flavor: bazzite
  kernel_version: 6.13.9-103.bazzite.fc42.x86_64

concurrency:
    group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
    cancel-in-progress: true

jobs:
  push-ghcr:
    name: Build and push image
    runs-on: ubuntu-24.04
    continue-on-error: false
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Define env.CONTAINER_TARGET
        run: |
            echo "CONTAINER_TARGET=bazzite-deck" >> $GITHUB_ENV

      - name: Define env.IMAGE_FLAVOR
        run: |
            echo "IMAGE_FLAVOR=${{ env.base_image_flavor }}" >> $GITHUB_ENV

      - name: Define env.NVIDIA_BASE
        run: |
            echo "NVIDIA_BASE=${{ env.base_name }}" >> $GITHUB_ENV

      - name: Define env.SHA_HEAD_SHORT
        run: |
          echo "SHA_HEAD_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Verify main image
        uses: EyeCantCU/cosign-action/verify@58722a084c82190b57863002d494c91eabbe9e79 # v0.3.0
        with:
          containers: ${{ env.base_image_name }}-${{ env.base_image_flavor }}:${{ env.fedora_version }}
          pubkey: https://raw.githubusercontent.com/ublue-os/${{ env.base_image_flavor }}/main/cosign.pub
          registry: ghcr.io/ublue-os

      - name: Verify akmods image
        uses: EyeCantCU/cosign-action/verify@58722a084c82190b57863002d494c91eabbe9e79 # v0.3.0
        with:
          containers: akmods:${{ env.kernel_flavor}}-${{ env.fedora_version }}-${{ env.kernel_version }}
          pubkey: https://raw.githubusercontent.com/ublue-os/akmods/main/cosign.pub
          registry: ghcr.io/ublue-os

      - name: Verify akmods-nvidia image
        uses: EyeCantCU/cosign-action/verify@58722a084c82190b57863002d494c91eabbe9e79 # v0.3.0
        with:
          containers: akmods-${{ env.target_nvidia_flavor }}:${{ env.kernel_flavor}}-${{ env.fedora_version }}-${{ env.kernel_version }}
          pubkey: https://raw.githubusercontent.com/ublue-os/akmods/main/cosign.pub
          registry: ghcr.io/ublue-os

      # Checkout push-to-registry action GitHub repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Check just syntax
        uses: ublue-os/just-action@bda593098a84a84973b002b4377709166a68be52 # v2

      - name: Maximize build space
        uses: AdityaGarg8/remove-unwanted-software@8831c82abf29b34eb2caac48d5f999ecfc0d8eef # v4.1
        with:
          remove-dotnet: true
          remove-android: true
          remove-haskell: true
          remove-codeql: true
          remove-docker-images: true
          remove-large-packages: true
          remove-cached-tools: true
          remove-swapfile: true

      - name: Pull main, akmods, rechunk images
        uses: Wandalen/wretry.action@e68c23e6309f2871ca8ae4763e7629b9c258e1ea # v3.8.0
        with:
            attempt_limit: 3
            attempt_delay: 15000
            command: |
                # pull the base images used for FROM in Containerfile so
                # we can retry on that unfortunately common failure case
                sudo podman pull ghcr.io/ublue-os/${{ env.base_image_name }}-${{ env.base_image_flavor }}:${{ env.fedora_version }}
                sudo podman pull ghcr.io/ublue-os/akmods:${{ env.kernel_flavor}}-${{ env.fedora_version }}-${{ env.kernel_version }}
                sudo podman pull ghcr.io/ublue-os/akmods-${{ env.target_nvidia_flavor }}:${{ env.kernel_flavor}}-${{ env.fedora_version }}-${{ env.kernel_version }}

                # Add rechunk as well to remove this source of failure
                sudo podman pull ghcr.io/hhd-dev/rechunk:v1.2.1

      - name: Get source versions
        id: labels
        uses: Wandalen/wretry.action@e68c23e6309f2871ca8ae4763e7629b9c258e1ea # v3.8.0
        with:
            attempt_limit: 3
            attempt_delay: 15000
            command: |
                set -eo pipefail
                skopeo inspect docker://ghcr.io/ublue-os/${{ env.base_image_name }}-${{ env.base_image_flavor }}:${{ env.fedora_version }} > source.json
                ver=$(jq -r '.Labels["org.opencontainers.image.version"]' source.json)
                if [ -z "$ver" ] || [ "null" = "$ver" ]; then
                    echo "inspected image version must not be empty or null"
                    exit 1
                fi
                echo "SOURCE_IMAGE_VERSION=$ver" >> $GITHUB_ENV

      # Generate a primary version key that appears
      # in KDE, rpm-ostree status, and github.
      - name: Generate Version
        id: generate-version
        shell: bash
        run: |
            # Generate the primary version key that will be stored on os-release,
            # shown on the bootloader, and used for the image tag.
            UPSTREAM_TAG="${{ env.SOURCE_IMAGE_VERSION }}"
            # Remove .0 suffix from upstream tag so we can add our own and
            # the wrong one does not end up in the image.
            UPSTREAM_TAG="${UPSTREAM_TAG%.*}"
            FEDORA_VERSION="${{ env.fedora_version }}"
            SHA_SHORT="${GITHUB_SHA::7}"

            if [ -n "${{ github.event.pull_request.number }}" ]; then
                VERSION="pr-${FEDORA_VERSION}-${{ github.event.pull_request.number }}"
                PRETTY_VERSION="PR (${{ github.event.pull_request.number }}, ${UPSTREAM_TAG})"
            elif [[ ${{ github.ref_name }} == "unstable" ]]; then
                VERSION="unstable-${UPSTREAM_TAG}"
                PRETTY_VERSION="Unstable (F${UPSTREAM_TAG}, #${SHA_SHORT})"
            elif [[ ${{ github.ref_name }} == "testing" ]]; then
                VERSION="testing-${UPSTREAM_TAG}"
                PRETTY_VERSION="Testing (F${UPSTREAM_TAG}, #${SHA_SHORT})"
            else
                VERSION="${UPSTREAM_TAG}"
                PRETTY_VERSION="Stable (F${UPSTREAM_TAG})"
            fi
            echo "tag=${VERSION}" >> $GITHUB_OUTPUT
            echo "pretty=${PRETTY_VERSION}" >> $GITHUB_OUTPUT

            echo "Generated the following:"
            cat $GITHUB_OUTPUT

      # Generate a file with all the build-args passed to buildah
      - name: Prepare build args file
        run: |
          cat <<'EOF' >>build_args.txt
          IMAGE_NAME=${{ env.IMAGE_NAME }}
          IMAGE_FLAVOR=${{ env.IMAGE_FLAVOR }}
          NVIDIA_FLAVOR=${{ env.target_nvidia_flavor }}
          NVIDIA_BASE=${{ env.NVIDIA_BASE }}
          IMAGE_VENDOR=${{ github.repository_owner }}
          BASE_IMAGE_NAME=${{ env.base_image_name }}
          BASE_IMAGE_FLAVOR=${{ env.base_image_flavor }}
          FEDORA_VERSION=${{ env.fedora_version }}
          KERNEL_FLAVOR=${{ env.kernel_flavor }}
          KERNEL_VERSION=${{ env.kernel_version }}
          IMAGE_BRANCH=${{ github.ref_name }}
          SHA_HEAD_SHORT=${{ env.SHA_HEAD_SHORT }}
          VERSION_TAG=${{ steps.generate-version.outputs.tag }}
          VERSION_PRETTY=${{ steps.generate-version.outputs.pretty }}
          EOF

      # Build image using buildah and save it to raw-img
      - name: Build Image
        id: build_image
        run: |
          sudo buildah build \
            --target ${{ env.CONTAINER_TARGET }} \
            --build-arg-file build_args.txt \
            --tag raw-img .

      # Reprocess raw-img using rechunker which will delete it
      - name: Run Rechunker
        id: rechunk
        uses: hhd-dev/rechunk@c945e9ec8ad4466f888e41ab7f4d5ba2f74a8ee4 # v1.2.1
        with:
          rechunk: 'ghcr.io/hhd-dev/rechunk:v1.2.1'
          ref: 'raw-img'
          prev-ref: '${{ steps.generate-prev-ref.outputs.ref }}'
          version: '${{ steps.generate-version.outputs.tag }}'
          labels: |
            io.artifacthub.package.logo-url=https://raw.githubusercontent.com/ublue-os/bazzite/main/repo_content/logo.png
            io.artifacthub.package.readme-url=https://shzj.cc/
            org.opencontainers.image.created=<timestamp>
            org.opencontainers.image.description=Bazzite is a custom image built upon Fedora Atomic Desktops that brings the best of Linux gaming to all of your devices - including your favorite handheld.
            org.opencontainers.image.licenses=Apache-2.0
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=https://github.com/ublue-os/bazzite
            org.opencontainers.image.title=Bazzite
            org.opencontainers.image.vendor=Universal Blue
            org.opencontainers.image.url=https://bazzite.gg
            org.universal-blue.pkg.kernel=<relver:kernel>
            org.universal-blue.pkg.gamescope=<relver:gamescope>

      # Generate tags after rechunker runs and checks the primary tag is not duplicated
      # If it is, rechunk will suffix it by .1, .2, etc and put it in steps.rechunk.outputs.version
      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          COMMIT_TAGS=()
          BUILD_TAGS=()

          # Have tags for tracking builds during pull request
          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("pr-${{ github.event.number }}")
          COMMIT_TAGS+=("${SHA_SHORT}")

          # Append matching timestamp tags to keep a version history
          for TAG in "${BUILD_TAGS[@]}"; do
              BUILD_TAGS+=("${TAG}-${TIMESTAMP}")
          done

          BUILD_TAGS+=("${TIMESTAMP}")
          BUILD_TAGS+=("latest")

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done

              alias_tags=("${COMMIT_TAGS[@]}")
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi

          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done

          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@d0603cd0a7dd490be678164909f65c7737470a7f # v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      # Push the image to GHCR (Image Registry)
      - name: Push To GHCR
        uses: Wandalen/wretry.action@e68c23e6309f2871ca8ae4763e7629b9c258e1ea # v3.8.0
        id: push
        if: github.event_name != 'pull_request'
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo podman login ghcr.io -u ${{ github.actor }} --password-stdin
            for tag in ${{ steps.generate-tags.outputs.alias_tags }}; do
              sudo skopeo copy ${{ steps.rechunk.outputs.ref }} docker://${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}:$tag
            done
      - name: Get Image Digest
        id: digest
        run: |
            # Get digest for signing
            DIGEST=$(sudo skopeo inspect --format '{{.Digest}}' ${{ steps.rechunk.outputs.ref }})
            echo "Digest is: $DIGEST"
            echo "digest=${DIGEST}" >> $GITHUB_OUTPUT

#      - name: Sign container image
#        uses: EyeCantCU/cosign-action/sign@58722a084c82190b57863002d494c91eabbe9e79 # v0.3.0
#        if: github.event_name != 'pull_request'
#        with:
#            containers: ${{ env.IMAGE_NAME }}
#            registry-token: ${{ secrets.GITHUB_TOKEN }}
#            signing-secret: ${{ secrets.SIGNING_SECRET }}
#            tags: ${{ steps.digest.outputs.digest }}
#            registry: ${{ env.IMAGE_REGISTRY }}

      - name: Echo outputs
        if: github.event_name != 'pull_request'
        run: |
            echo "${{ toJSON(steps.push.outputs) }}"